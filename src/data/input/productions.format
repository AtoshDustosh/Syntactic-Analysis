// the LHS of the first production must be the starting symbol
PROGRAM -> DEFINE PROGRAM | ASSIGNMENT PROGRAM | CONTROL PROGRAM | PROCEDURE_CALL PROGRAM | empty

DEFINE -> proc DATATYPE { PROGRAM  } | DATATYPE id ; | record id { PROGRAM } ;
DATATYPE -> SINGLE_TYPE ARRAY_SUFFIX 
SINGLE_TYPE -> int | double | boolean 
ARRAY_SUFFIX -> [ EXPRESSION ] ARRAY_SUFFIX | empty

ASSIGNMENT -> id ASSIGNMENT_1
ASSIGNMENT_1 -> = EXPRESSION ; | [ EXPRESSION ] ARRAY_SUFFIX = EXPRESSION ;

EXPRESSION -> id EXPRESSION_1 | number EXPRESSION_1 | id ARRAY_SUFFIX EXPRESSION_1 | ( EXPRESSION ) EXPRESSION_1
EXPRESSION_1 -> ARITHMETIC_OP_DUAL EXPRESSION | ARITHMETIC_OP_SING_SUFFIX EXPRESSION_1 | empty

ARITHMETIC_OP_DUAL -> + | - | * | / | %
ARITHMETIC_OP_SING_SUFFIX -> ++ | --

CONTROL -> if CONDITION then { PROGRAM } CONTROL_0 | while CONDITION do { PROGRAM } ;
CONTROL_0 ->  else { PROGRAM } | empty
CONDITION -> LOGIC_OP_SING_PREFIX CONDITION | ( CONDITION ) CONDITION_1 | EXPRESSION RELOP EXPRESSION CONDITION_1 | true CONDITION_1 | false CONDITION_1
CONDITION_1 -> LOGIC_OP_DUAL CONDITION | empty

LOGIC_OP_DUAL -> & | \| | ^ | && | \|\|	// expression of the vertical bar is "\|"
LOGIC_OP_SING_PREFIX -> ~ | !
RELOP -> > | < | >= | <= | == | !=

PROCEDURE_CALL -> call id ( ELIST ) ;
ELIST -> EXPRESSION ELIST_1
ELIST_1 -> , EXPRESSION | empty

// this is the end of the file