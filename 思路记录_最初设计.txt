0. 已拥有功能
	目前已经可以从LexicalAnalyzer中通过getTokens方法获得token序列

1. 产生式
	1.1 语法分析需要读入输入文件src/data/input/productions.format
	这里对实验手册附录中的语法符号的名称进行略微修改，以便于阅读和实现时的阅读
	产生式在文件中的格式为
		S > PROGRAM（S为开始符号/程序入口）
		PROGRAM -> DEFINE PROGRAM | ASSIGNMENT PROGRAM | ...（这里省略号表示其他部分省略）
		...
		DEFINE -> DATATYPE id | ...
		...
	实现之前的必要格式说明：
		- 为了简化语法，本打算对词法分析实验中的各种运算符、关键字进行修改，但是因为实验1中的DFA设计局限，导致这里修改可能牵扯到DFA的改动，所以还是避免修改了
		- 非终结符用大写字母和连字符的组合表示，所有其它字符均为特殊意义的语法符号，比如表示语法逻辑，或是表示字符集合
		- “|”表示语法上的或
		- “->”表示产生式的箭头
		- 语法符号之间使用空格或是制表符间隔，每遇到一个间隔符表示当前语法符号的终结
		- 产生式文件中可能需要注释，需要对应设置一个注释处理程序
		- 关于“ε”，建议将它也设置成特殊意义的语法符号，参考示例程序，使用empty表示
	1.2 逐行读入产生式以后，需要对每个产生式进行分析
	1.3 整体来说，就是需要针对产生式的输入文件造一个parser

2. 产生式的处理
	2.1 需要对产生式消除二义性（实际上对各种语法符号规定优先级就可以了）
		参考网站：https://blog.csdn.net/GenuineMonster/article/details/88792616
	2.2 需要对产生式消除左递归（可选，可以在产生式的设计中手动处理好）
	2.3 需要对产生式降低回溯的影响（提取左公因子）（同2.2）

3. FIRST集，FOLLOW集，SELECT集
	3.1 处理每个非终结符的FIRST集和FOLLOW集
	3.2 获得每个产生式的SELECT集
	3.3 检查是否为LL（1）文法，若不是，报错
	3.4 依据FIRST，FOLLOW，SELECT构造预测分析表，并根据恐慌模式设置同步词法单元

4. 表驱动的非递归预测分析算法
	4.1 使用预测分析表对token序列进行处理和正常的语法分析
	4.2 处理过程中的语法分析树构造实现
	4.3 处理过程中的错误处理实现

5. GUI
	5.1 展示产生式
	5.2 展示产生式的处理（可选）
	5.3 展示FIRST集，FOLLOW集，SELECT集的计算结果
	5.4 展示预测分析表（添加同步词法单元后的）
	5.5 展示分析结果的语法分析树